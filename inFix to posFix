#pragma once
#include"stack.h"
#include"queue.h"

int priOpe(char x) {
	if (x == '^') return 3;
	else if (x == '*' || x == '/') return 2;
	else if (x == '+' || x == '-') return 1;
	return -1;
}

Num initNum() {
	Num temp;
	temp.ope = ' ';
	temp.val[0] = ' ';
	return temp;
}

queue<Num> convertToPosfix(char source[]) {
	stack<Num> s;
	s.init();
	queue<Num> q;
	q.init();
	int i = 0;
	while (source[i] != '\0') {
		if (source[i] == ' ') {
			i++;
		}
		else if (source[i] == '(') {
			Num temp = initNum();
			temp.ope = '(';
			s.push(temp);
			i++;
		}
		else if (checkOperator(source, i) == true) {
			while (s.empty() != true && priOpe(s.top->data.ope) >= priOpe(source[i])) {
				q.push(s.top->data);
				s.pop();
			}
			Num temp = initNum();
			temp.ope = source[i];
			s.push(temp);
			i++;
		}
		else if (source[i] == ')') {
			while (s.top->data.ope != '(') {
				q.push(s.top->data);
				s.pop();
			}
			if (s.top != nullptr) s.pop();
			i++;
		}
		else {
			Num temp = initNum();
			int sPos = i;
			while (source[i] != ' ' && source[i] != '\0') {
				i++;
			}
			int ePos = i - 1;
			cutNum(source, temp, sPos, ePos);
			q.push(temp);
		}
		
	}

	while (s.empty() != true) {
		q.push(s.top->data);
		s.pop();
	}
	return q;
}


void printResult(queue<Num> q) {
	if (q.empty() == true) return;
	Node<Num>* temp = q.front;
	while (temp != nullptr) {
		if (temp->data.val[0] != ' ') cout << temp->data.val << " ";
		else cout << temp->data.ope << " ";
		temp = temp->next;
	}
}


